/*
 * Kico API
 *
 * This file describe the business logic of the kico api
 *
 * API version: 0.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/google/uuid"
	"go.mongodb.org/mongo-driver/mongo"
)

// APIService is a service that implents the logic for the DefaultApiServicer
// This service should implement the business logic for every endpoint for the DefaultApi API.
// Include any external packages or services that will be required by this service.
type APIService struct {
	dbClient   mongo.Client
	dataFolder string
}

// NewAPIService creates a default api service
func NewAPIService(client mongo.Client, dataFolder string) DefaultAPIServicer {
	return &APIService{dbClient: client, dataFolder: dataFolder}
}

// AddImageToVideo - Upload an image linked to a video
func (s *APIService) AddImageToVideo(ctx context.Context, id int32, name string, secteurID string, time string) (interface{}, string, error) {
	log.Print("AddImageToVideo")

	pid := uuid.New().String()
	url := "/images/" + pid
	filepath := s.dataFolder + url

	picture := Image{
		ID:        pid,
		Name:      name,
		Time:      time,
		SecteurID: secteurID,
		URL:       "/images/" + pid,
	}

	return picture, filepath, nil
}

// AddVideo - Add a  video
func (s *APIService) AddVideo(ctx context.Context, title string) (interface{}, string, error) {
	log.Printf("AddVideo")

	collection := s.dbClient.Database("ico").Collection("videos")
	vid := uuid.New().String()
	url := "/videos/" + vid
	filepath := s.dataFolder + url

	video := Video{
		ID:    vid,
		State: IMPORTED,
		Date:  time.Now(),
		Title: title,
		URL:   "/videos/" + vid,
	}

	insertResult, err := collection.InsertOne(ctx, video)

	if err != nil {
		print(err)
		return "Insertion error", "", err
	}
	fmt.Println("Inserted post with ID:", insertResult.InsertedID)

	return "OK", filepath, nil
}

// DeleteImage - Deletes an image
func (s *APIService) DeleteImage(ctx context.Context, id int32) (interface{}, error) {
	log.Printf("DeleteImage")
	return "OK", nil
}

// DeleteVideo - delete a video
func (s *APIService) DeleteVideo(ctx context.Context, id int32) (interface{}, error) {
	log.Printf("DeleteVideo")
	return "OK", nil
}

// GetImage - Retrieve an image
func (s *APIService) GetImage(ctx context.Context, id int32) (interface{}, error) {
	log.Printf("GetImage")
	return "OK", nil
}

// GetImagesFromVideo - Retrieve all images linked to a video
func (s *APIService) GetImagesFromVideo(ctx context.Context, id int32) (interface{}, error) {
	log.Printf("GetImagesFromVideo")
	return "OK", nil
}

// GetVideo - Retrieve a single video
func (s *APIService) GetVideo(ctx context.Context, id int32) (interface{}, error) {
	log.Printf("GetVideo")
	return "OK", nil
}

// GetVideos - Retrieve all videos
func (s *APIService) GetVideos(ctx context.Context) (interface{}, error) {
	log.Printf("GetVideos")
	return "OK", nil
}

// UpdateImage - update an image
func (s *APIService) UpdateImage(ctx context.Context, id int32, image Image) (interface{}, error) {
	log.Printf("UpdateImage")
	return "OK", nil
}

// UpdateVideo - Update a video
func (s *APIService) UpdateVideo(ctx context.Context, id int32, video Video) (interface{}, error) {
	log.Printf("UpdateVideo")
	return "OK", nil
}
